# -*- coding: utf-8 -*-
"""The_Tempest.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZYbD86l6n5Si48KnsU_f2Q6jY5NO3vby
"""

!pip install text2emotion
!pip uninstall emoji
!pip install emoji==0.6.0

import requests
from bs4 import BeautifulSoup
import nltk
nltk.download('punkt')
nltk.download('vader_lexicon')
from nltk.sentiment.vader import SentimentIntensityAnalyzer
import text2emotion as te

# Download the text of "The Tempest"
url = "https://www.gutenberg.org/files/23042/23042-0.txt"
response = requests.get(url)
text = open("workingFile.txt")
# text = response.content.decode('utf-8')

# Use NLTK to tokenize the text into sentences
sentences = nltk.sent_tokenize(text)

# Filter out sentences spoken by the character

character_sentences = [s for s in sentences]

# Character name
character_name = "Antonio"

# Initialize emotion counts
emotions = {
    "Happy": 0,
    "Sad": 0,
    "Angry": 0,
    "Surprise": 0,
    "Fear": 0
}

# Iterate through the sentences and count emotions for the character
for sentence in sentences:
    if character_name.lower() in sentence.lower():
        sentence_emotions = te.get_emotion(sentence)
        for emotion, value in sentence_emotions.items():
            emotions[emotion] += value

# Print the emotion counts for the character
print("\nEmotions for", character_name, ":", emotions,"\n")

# Initialize the SentimentIntensityAnalyzer
sia = SentimentIntensityAnalyzer()

# Analyze sentiment of each sentence spoken by the character
results = []
for sentence in character_sentences:
    score = sia.polarity_scores(sentence)
    results.append(score)

# Print the compound sentiment score for each sentence spoken by the character
print("Sentiment analysis for the character:")
for i, score in enumerate(results):
    print(f"Sentence {i+1}: {score['compound']:.2f}")

# We print the overall sentiment scores of all the sentences
compound_scores = [score['compound'] for score in results]
overall_score = sum(compound_scores) / len(compound_scores)
print(f"Overall Sentiment Score: {overall_score:.2f}")

# Visualize the sentiment scores
import matplotlib.pyplot as plt

fig, ax = plt.subplots(figsize=(10, 6))
ax.hist(compound_scores, bins=20)
ax.set_title('Sentiment Analysis of the character')
ax.set_xlabel('Sentiment Score')
ax.set_ylabel('Frequency')
plt.show()

import requests
from bs4 import BeautifulSoup
import nltk
nltk.download('punkt')
nltk.download('vader_lexicon')
from nltk.sentiment.vader import SentimentIntensityAnalyzer
import text2emotion as te

# Download the text of "The Tempest"
url = "https://www.gutenberg.org/files/23042/23042-0.txt"
response = requests.get(url)
text = response.content.decode('utf-8')

# Use NLTK to tokenize the text into sentences
sentences = nltk.sent_tokenize(text)

# Filter out sentences spoken by the character

character_sentences = [s for s in sentences if '_Ari._' in s]

# Character name
character_name = "ARIEL"

# Initialize emotion counts
emotions = {
    "Happy": 0,
    "Sad": 0,
    "Angry": 0,
    "Surprise": 0,
    "Fear": 0
}

# Iterate through the sentences and count emotions for the character
for sentence in sentences:
    if character_name.lower() in sentence.lower():
        sentence_emotions = te.get_emotion(sentence)
        for emotion, value in sentence_emotions.items():
            emotions[emotion] += value

# Print the emotion counts for the character
print("\nEmotions for", character_name, ":", emotions,"\n")

# Initialize the SentimentIntensityAnalyzer
sia = SentimentIntensityAnalyzer()

# Analyze sentiment of each sentence spoken by the character
results = []
for sentence in character_sentences:
    score = sia.polarity_scores(sentence)
    results.append(score)

# Print the compound sentiment score for each sentence spoken by the character
print("Sentiment analysis for the character:")
for i, score in enumerate(results):
    print(f"Sentence {i+1}: {score['compound']:.2f}")

# We print the overall sentiment scores of all the sentences
compound_scores = [score['compound'] for score in results]
overall_score = sum(compound_scores) / len(compound_scores)
print(f"Overall Sentiment Score: {overall_score:.2f}")

# Visualize the sentiment scores
import matplotlib.pyplot as plt

fig, ax = plt.subplots(figsize=(10, 6))
ax.hist(compound_scores, bins=20)
ax.set_title('Sentiment Analysis of the character')
ax.set_xlabel('Sentiment Score')
ax.set_ylabel('Frequency')
plt.show()

import requests
from bs4 import BeautifulSoup
import nltk
nltk.download('punkt')
nltk.download('vader_lexicon')
from nltk.sentiment.vader import SentimentIntensityAnalyzer
import text2emotion as te

# Download the text of "The Tempest"
url = "https://www.gutenberg.org/files/23042/23042-0.txt"
response = requests.get(url)
text = response.content.decode('utf-8')

# Use NLTK to tokenize the text into sentences
sentences = nltk.sent_tokenize(text)

# Filter out sentences spoken by the character

character_sentences = [s for s in sentences if '_Mir._' in s]

# Character name
character_name = "MIRANDA"

# Initialize emotion counts
emotions = {
    "Happy": 0,
    "Sad": 0,
    "Angry": 0,
    "Surprise": 0,
    "Fear": 0
}

# Iterate through the sentences and count emotions for the character
for sentence in sentences:
    if character_name.lower() in sentence.lower():
        sentence_emotions = te.get_emotion(sentence)
        for emotion, value in sentence_emotions.items():
            emotions[emotion] += value

# Print the emotion counts for the character
print("\nEmotions for", character_name, ":", emotions,"\n")

# Initialize the SentimentIntensityAnalyzer
sia = SentimentIntensityAnalyzer()

# Analyze sentiment of each sentence spoken by the character
results = []
for sentence in character_sentences:
    score = sia.polarity_scores(sentence)
    results.append(score)

# Print the compound sentiment score for each sentence spoken by the character
print("Sentiment analysis for the character:")
for i, score in enumerate(results):
    print(f"Sentence {i+1}: {score['compound']:.2f}")

# We print the overall sentiment scores of all the sentences
compound_scores = [score['compound'] for score in results]
overall_score = sum(compound_scores) / len(compound_scores)
print(f"Overall Sentiment Score: {overall_score:.2f}")

# Visualize the sentiment scores
import matplotlib.pyplot as plt

fig, ax = plt.subplots(figsize=(10, 6))
ax.hist(compound_scores, bins=20)
ax.set_title('Sentiment Analysis of the character')
ax.set_xlabel('Sentiment Score')
ax.set_ylabel('Frequency')
plt.show()

import requests
from bs4 import BeautifulSoup
import nltk
nltk.download('punkt')
nltk.download('vader_lexicon')
from nltk.sentiment.vader import SentimentIntensityAnalyzer
import text2emotion as te

# Download the text of "The Tempest"
url = "https://www.gutenberg.org/files/23042/23042-0.txt"
response = requests.get(url)
text = response.content.decode('utf-8')

# Use NLTK to tokenize the text into sentences
sentences = nltk.sent_tokenize(text)

# Filter out sentences spoken by the character

character_sentences = [s for s in sentences if '_Cal._' in s]

# Character name
character_name = "Caliban"

# Initialize emotion counts
emotions = {
    "Happy": 0,
    "Sad": 0,
    "Angry": 0,
    "Surprise": 0,
    "Fear": 0
}

# Iterate through the sentences and count emotions for the character
for sentence in sentences:
    if character_name.lower() in sentence.lower():
        sentence_emotions = te.get_emotion(sentence)
        for emotion, value in sentence_emotions.items():
            emotions[emotion] += value

# Print the emotion counts for the character
print("\nEmotions for", character_name, ":", emotions,"\n")

# Initialize the SentimentIntensityAnalyzer
sia = SentimentIntensityAnalyzer()

# Analyze sentiment of each sentence spoken by the character
results = []
for sentence in character_sentences:
    score = sia.polarity_scores(sentence)
    results.append(score)

# Print the compound sentiment score for each sentence spoken by the character
print("Sentiment analysis for the character:")
for i, score in enumerate(results):
    print(f"Sentence {i+1}: {score['compound']:.2f}")

# We print the overall sentiment scores of all the sentences
compound_scores = [score['compound'] for score in results]
overall_score = sum(compound_scores) / len(compound_scores)
print(f"Overall Sentiment Score: {overall_score:.2f}")

# Visualize the sentiment scores
import matplotlib.pyplot as plt

fig, ax = plt.subplots(figsize=(10, 6))
ax.hist(compound_scores, bins=20)
ax.set_title('Sentiment Analysis of the character')
ax.set_xlabel('Sentiment Score')
ax.set_ylabel('Frequency')
plt.show()